/* Valve Steam CSS theme switcher
// Console version for automation and use in scripts
//
// Until VALVE provides something like "user.css",
// we will have to use this. */

var isDebugging = false;

var steamPathDefault = "C:\\Program Files (x86)\\Steam";
var styleFileDefault = "default.css";

var cssBegin = "/* ### custom theme css begin ### */";
var cssEnd = "/* ### custom theme css end ### */";
var crlf = "\r\n";

/* Dialogs */

function message (msg) {
  WScript.Echo (msg);
}

function silence (msg) {}
var debug = isDebugging ? message : silence;

/* File system */

function fileExists (path) {
  return fso.FileExists (path);
}

function dirExists (path) {
  return fso.FolderExists (path);
}

function readFile (path) {
  var forReading = 1;
  var file = fso.OpenTextFile (path, forReading);
  var text = file.ReadAll();
  file.Close();
  return text;
}

function writeFile (path, text) {
  var forWriting = 2;
  var file = fso.OpenTextFile (path, forWriting, true);
  file.Write (text);
  file.Close();
  return true;
}

/* String */

function trimRight (str) {
  var len = str.length;
  if (len === 0) return str;
  while (str.charCodeAt (--len) < 32);
  return str.substring (0, len + 1);
}

/* --- */

function exit (code) {
  WScript.Quit ((code === undefined) ? 0 : code);
}

function error (msg, code) {
  message (msg);
  WScript.Quit ((code === undefined) ? 1 : code ? code : 1);
}

/* Initialize */
var fso = WScript.CreateObject ("Scripting.FileSystemObject");
var currDir = fso.GetAbsolutePathName (".");
var stylesDir = fso.BuildPath (currDir, "styles");
var configPath = fso.BuildPath (currDir, "config");
var debugPath = fso.BuildPath (currDir, "debug.css");

/* Read configuration */
var steamPath;
var styleFile;

if (fileExists (configPath)) {
  var forReading = 1;
  var file = fso.OpenTextFile (configPath, forReading);

  steamPath = file.ReadLine();
  if (!dirExists (steamPath)) {
    steamPath = steamPathDefault;
  }

  styleFile = file.ReadLine();
  if (!fileExists (fso.BuildPath (stylesDir, styleFile))) {
    styleFile = styleFileDefault;
  }

  file.Close();
} else {
  steamPath = steamPathDefault;
  styleFile = styleFileDefault;
}

/* Override the style name from command line */
var args = WScript.Arguments;
if (args.length != 0) {
  var name = args(0);
  if (fileExists (fso.BuildPath (stylesDir, name))) {
    styleFile = name;
  }
}

/* Read CSS */
var stylePath = fso.BuildPath (stylesDir, styleFile);
var cssPath = fso.BuildPath (steamPath + "\\steamui\\css", "6.css");
if (!fileExists (stylePath)) error ("Couldn't find the custom style file. (" + stylePath + ")");
if (!fileExists (cssPath)) error ("Couldn't find the STEAM CSS to modify. Is the STEAM installation path correct? (" + cssPath + ")");
var styleCss = readFile (stylePath);
var steamCss = readFile (cssPath);

/* Remove previous style */
var cssBeginIdx = steamCss.indexOf (cssBegin);
var cssEndIdx = steamCss.indexOf (cssEnd);

if (cssBeginIdx !== -1 && cssEndIdx !== -1) {
  debug ("Previous style found");
  steamCss = trimRight (steamCss.substring (0, cssBeginIdx)
  + steamCss.substring (cssEndIdx + cssEnd.length));
}

/* Merge and write back */
writeFile (isDebugging ? debugPath : cssPath, steamCss
+ crlf + crlf + cssBegin + crlf + crlf + styleCss
+ crlf + cssEnd + crlf);
